datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output = "./pothos-types.ts"
}

model User {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  email         String      @unique
  emailVerified DateTime?
  name          String?
  imageUrl      String?
  projects      Project[]

  accounts      Account[]
  sessions      Session[]
}

model Project {
  id            String      @id @default(uuid())
  name          String
  slug          String      @unique
  users         User[]

  content       Json?

  status        String      @default("active")  // active, hold, deployed, cancelled
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  stripeCustomerId          String?     @unique
  stripeSubscriptionId      String?     @unique
  stripePriceId             String?
  stripeCurrentPeriodEnd    DateTime?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}